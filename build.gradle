group = 'com.xingsu'
version = '0.0.1'

buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

war {
	baseName = 'com.xingsu.digital3c'
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	mybatisGenerator
	providedRuntime
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile("org.springframework.boot:spring-boot-devtools")
	compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0")
	compile("mysql:mysql-connector-java:6.0.6")
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
	compile fileTree(dir:'libs',include:['*.jar'])

	mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
	mybatisGenerator group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5'
	mybatisGenerator group: 'tk.mybatis', name: 'mapper', version: '3.5.2'

	compile('org.springframework.boot:spring-boot-starter-websocket')
	testCompile('org.springframework.boot:spring-boot-starter-test')


}

def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}

task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.username")
	ant.properties['password'] = properties.getProperty("jdbc.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("package.model")
	ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}
